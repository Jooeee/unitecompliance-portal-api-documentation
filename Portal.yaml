openapi: 3.1.0
#Info Start
info:
  title: Unite Compliance Portal API
  description: |
    The Unite Compliance Portal RESTful API provides comprehensive access to manage your compliance and screening operations. This API enables you to:
    
    - Create and manage candidates
    - Create and manage candidate bookings
    - Retrieve candidate certificates
    - Create and manage users
    - Create and manage teams
    - Create and manage recruitment consultants
    - Receive real time notifications for various actions
    
    Get Started:
    1. Contact Unite Compliance to set up your account
    2. Use your API credentials to authenticate
    3. Start integrating with our endpoints
    
    Last update: 2025-02-13
    
    ## Authentication
    All API calls require an API key for authentication. Include your API key in the request header:
    ```
    api-key: your-api-key
    ```
    
    ## Rate Limiting
    - 1000 requests per minute per API key

  version: 1.0.0
  termsOfService: https://unitecompliance.co.uk/api-terms-and-conditions
  contact:
    name: Unite Compliance
    email: help@unitecompliance.co.uk
    url: https://unitecompliance.co.uk/apis
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
#Info End

#Servers Start
servers:
    - url: https://sandbox.certifit.io/api
      description: Sandbox Server
    - url: https://certifit.io/api
      description: Production Server
#Servers End

#Tags Start
tags:
  - name: connection
    description: Connection Testing

  - name: candidate
    description: Everything related to candidates

  - name: booking
    description: Everything related to bookings

  - name: service information
    description: Information about our services

  - name: user
    description: Everything related to users

  - name: team
    description: Everything related to teams

  - name: recruitment consultant
    description: Everything related to recruitment consultants
#Tags Start

#Paths Start
paths:
  #Connection - Test
  /connection/test:
    get:
      tags:
        - connection
      summary: Test connection to the API
      description: Send a GET request to this endpoint to verify that your connection to the server is functioning properly.
      operationId: connectionTest
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectionTestResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/connectionTestResult"
        "401":
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response401"
      security:
        - api-key: []

  #Candidate - Get
  /organisation/candidates:
    get:
      tags:
        - candidate
      summary: Get a list of candidates
      operationId: getCandidates
      security:
        - api-key: []

  #Candidate - Create
  /candidate/create:
    post:
      tags:
        - candidate
      summary: Create a candidate
      description: Send a POST request to create a candidate
      operationId: createCandidate
      requestBody:
        description: Send a POST request to create a candidate
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCandidate"

      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              example: {
                "status": "success",
                "msg": "Candidate is added.",
                "data": {
                  "candidate": {
                    "id": "9e3395a7-752d-4351-b40b-7af4276f5ad5"
                  }
                }
              }
      security:
        - api-key: []

  #Candidate - Update
  /candidate/update/{candidateId}:
    put:
      tags:
        - candidate
      summary: Update a candidate fully
      description: Send a PUT request to update a candidate's details
      operationId: updateCandidatePut
      parameters:
        - name: candidateId
          in: path
          description: The ID of the candidate that's being updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Send a PUT request to update a candidate's details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateCandidatePut"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

    patch:
      tags:
        - candidate
      summary: Update a candidate by field
      description: Send a PATCH request to update a candidate's details
      operationId: updateCandidatePatch
      parameters:
        - name: candidateId
          in: path
          description: The ID of the candidate that's being updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Send a PATCH request to update a candidate's details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateCandidatePatch"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: []

  #Candidate - Delete
  /candidate/delete/{candidateId}:
    delete:
      tags:
        - candidate
      summary: Delete a candidate
      description: Send a DELETE request to delete a candidate
      operationId: deleteCandidate
      parameters:
        - name: candidateId
          in: path
          description: The UUID of the candidate that's being deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              example: {
                "status": "success",
                "msg": "Candidate deleted."
              }
      security:
        - api-key: []

  #Candidate - Create Note
  /candidate/note/create/{candidateId}:
    post:
      tags:
        - candidate
      summary: Create a candidate note
      description: Add a note to a candidate
      operationId: createCandidateNote
      parameters:
        - name: candidateId
          in: path
          description: The UUID of the candidate you wish to add a note to
          required: true
          schema:
            type: string
            format: uuid
      security:
        - api-key: []
      requestBody:
        description: Send a POST request to create a candidate note
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCandidateNote"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"

  #Candidate - Get Notes
  /candidate/notes/{candidateId}:
    get:
      tags:
        - candidate
      summary: Get candidate notes
      description: Get all notes belonging to a candidate
      operationId: getCandidateNotes
      parameters:
        - name: candidateId
          in: path
          description: The UUID of the candidate you wish to get the notes of
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: []

  #Candidate - Get Professions
  /candidate/professions:
    get:
      tags:
        - candidate
      summary: Get a list of candidate professions
      description: Get all candidate professions
      operationId: getCandidateProfessions
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"

      security:
        - api-key: [ ]

  #Booking - Create Clinical Interview
  /booking/create/clinical-interview:
    post:
      tags:
        - booking
      summary: Create Clinical Interview Booking
      description: Create a booking for a clinical interview service
      operationId: createClinicalInterviewBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createClinicalInterviewBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: []

  #Booking - Create Clinical Appraisal
  /booking/create/clinical-appraisal:
    post:
      tags:
        - booking
      summary: Create Clinical Appraisal Booking
      description: Create a booking for a clinical appraisal service
      operationId: createClinicalAppraisalBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createClinicalAppraisalBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: []

  #Booking - Create Blood Test
  /booking/create/blood-test:
    post:
      tags:
        - booking
      summary: Create Blood Test Booking
      description: Create a booking for a blood test service
      operationId: createBloodTestBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createBloodTestBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Radiation Badge
  /booking/create/radiation-badge:
    post:
      tags:
        - booking
      summary: Create Radiation Badge Booking
      description: Create a booking for a radiation badge service
      operationId: createRadiationBadgeBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createRadiationBadgeBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Fit to Work
  /booking/create/employment-reference:
    post:
      tags:
        - booking
      summary: Create Employment Reference Booking
      description: Create a booking for an employment reference service
      operationId: createEmploymentReferenceBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createEmploymentReferenceBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Placement Feedback
  /booking/create/end-of-placement-feedback:
    post:
      tags:
        - booking
      summary: Create Placement Feedback Booking
      description: Create a booking for a placement feedback service
      operationId: createPlacementFeedbackBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createPlacementFeedbackBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Fit to Work Check
  /booking/create/fit-to-work-check:
    post:
      tags:
        - booking
      summary: Create Fit to Work Check Booking
      description: Create a booking for a fit to work check service
      operationId: createFitToWorkCheckBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createFitToWorkCheckBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Practical Training
  /booking/create/practical-training:
    post:
      tags:
        - booking
      summary: Create Practical Training Booking
      description: Create a booking for a practical training service
      operationId: createPracticalTrainingBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createPracticalTrainingBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create DBS Check
  /booking/create/dbs-check:
    post:
      tags:
        - booking
      summary: Create a DBS Check Booking
      description: Create a booking for a DBS check
      operationId: createDBSCheckBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createDBSCheckBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Right to Work Check
  /booking/create/right-to-work-check:
    post:
      tags:
        - booking
      summary: Create Right to Work Check Booking
      description: Create a booking for a right to work check service
      operationId: createRightToWorkCheckBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createRightToWorkCheckBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Digital ID Check
  /booking/create/digital-id-check:
    post:
      tags:
        - booking
      summary: Create Digital ID Check Booking
      description: Create a booking for a digital ID check service
      operationId: createDigitalIDCheckBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createDigitalIdCheckBooking"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/bookingResponse200"
      security:
        - api-key: [ ]

  #Booking - Create Note
  /booking/note/create/{bookingId}:
    post:
      tags:
        - booking
      summary: Create a note for a booking
      operationId: createBookingNote
      parameters:
        - name: bookingId
          in: path
          description: The UUID of the booking to add a note to
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBookingNote'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Booking - Cancel
  /booking/cancel/{bookingId}:
    put:
      tags:
        - booking
      summary: Cancel a booking
      operationId: cancelBooking
      parameters:
        - name: bookingId
          in: path
          description: The UUID of the booking to cancel
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Booking - Refund
  /booking/refund/{bookingId}/{refundType}:
    post:
      tags:
        - booking
      summary: Refund a booking
      operationId: refundBooking
      parameters:
        - name: bookingId
          in: path
          description: The UUID of the booking to cancel
          required: true
          schema:
            type: string
        - name: refundType
          in: path
          description: The type of refund required (organisation | candidate)
          required: true
          schema:
            type: string
            enum:
              - organisation
              - candidate
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Booking - Amend
  /booking/amend/{bookingId}:
    put:
      tags:
        - booking
      summary: Amend a booking
      operationId: amendBooking
      parameters:
        - name: bookingId
          in: path
          description: The UUID of the booking to amend
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Service Information - Get Practical Training Schedule
  /service/schedule/{serviceSlug}/{bookingMethodSlug}:
    get:
      tags:
        - service information
      summary: Get the schedule of a service
      description: Get the schedule of a service
      operationId: getServiceSchedule
      parameters:
        - name: serviceSlug
          in: path
          description: The slug of the service
          required: true
          schema:
            type: string
        - name: bookingMethodSlug
          in: path
          description: The slug of the booking method
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: []

  #Service Information - Get 121 Training Schedule
  /service/schedule/{serviceSlug}/{bookingMethodSlug}/{date}:
    get:
      tags:
        - service information
      summary: Get the schedule of a service
      operationId: getServiceSchedule121
      parameters:
        - name: serviceSlug
          in: path
          description: The slug of the service
          required: true
          schema:
            type: string
        - name: bookingMethodSlug
          in: path
          description: The slug of the booking method
          required: true
          schema:
            type: string
        - name: date
          in: path
          description: The date you wish to get the schedule of
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Service Information - Organisation Templates
  /organisation/templates/{serviceSlug}:
    get:
      tags:
        - service information
      summary: Get service templates
      description: Get the available templates for a service. Optionally filter templates by providing a candidate ID.
      operationId: getOrganisationTemplates
      parameters:
        - name: serviceSlug
          in: path
          description: The slug of the service
          required: true
          schema:
            type: string
            enum:
              - clinical-interview
              - clinical-appraisal
        - name: candidateId
          in: query
          description: UUID of the candidate to filter templates by their profession (optional)
          required: false
          schema:
            type: string
            format: uuid
      security:
        - api-key: []

  #User - Get list
  /organisation/users:
    get:
      tags:
        - user
      summary: Get a list of users
      description: Send a GET request to retrieve a list of all users in the organisation
      operationId: getUsers
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #User - Create User
  /organisation/user/create:
    post:
      tags:
        - user
      summary: Create a user
      description: Send a POST request to create a user in the organisation
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              example:
                status: "success"
                msg: "The user is saved."
                data:
                  id: "9e33a8a0-d181-4971-a677-e5cae7c05bce"
      security:
        - api-key: [ ]

  #User - Update User
  /organisation/user/update/{userId}:
    put:
      tags:
        - user
      summary: Update a user
      description: Send a PUT request to update all of a user's fields
      operationId: updateUserPut
      parameters:
        - name: userId
          in: path
          description: The UUID of the user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserPut'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: []

    patch:
      tags:
        - user
      summary: Update a user
      operationId: updateUser
      description: Send a PATCH request to update applicable fields only
      parameters:
        - name: userId
          in: path
          description: The UUID of the user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserPatch'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #User - Delete User
  /organisation/user/delete/{userId}:
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The UUID of the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  msg:
                    type: string
                    example: The user is deleted
      security:
        - api-key: []

  #Recruitment Consultant - Create
  /organisation/recruitment-consultant/create:
    post:
      tags:
        - recruitment consultant
      summary: Add a recruitment consultant
      operationId: createRecruitmentConsultant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRecruitmentConsultant'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]


  #Recruitment Consultant - Update
  /organisation/recruitment-consultant/update/{recruitmentConsultantId}:
    put:
      tags:
        - recruitment consultant
      summary: Update a recruitment consultant
      description: Send a PUT request to update all fields
      operationId: updateRecruitmentConsultantPut
      parameters:
        - name: recruitmentConsultantId
          in: path
          description: The UUID of the recruitment consultant
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRecruitmentConsultantPut'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]


    patch:
      tags:
        - recruitment consultant
      summary: Update a recruitment consultant
      operationId: updateRecruitmentConsultantPatch
      description: Send a PUT request to update only relevant fields
      parameters:
        - name: recruitmentConsultantId
          in: path
          description: The UUID of the recruitment consultant
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRecruitmentConsultantPatch'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Recruitment Consultant - Delete
  /organisation/recruitment-consultant/delete/{recruitmentConsultantId}:
    delete:
      tags:
        - recruitment consultant
      summary: Delete a recruitment consultant
      operationId: deleteRecruitmentConsultant
      parameters:
        - name: recruitmentConsultantId
          in: path
          description: The UUID of the recruitment consultant
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Recruitment Consultant - Get
  /organisation/recruitment-consultants:
    get:
      tags:
        - recruitment consultant
      summary: Get a list of recruitment consultants
      operationId: getRecruitmentConsultants
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Teams - Create
  /organisation/team/create:
    post:
      tags:
        - team
      summary: Create a team
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTeam'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Teams - Update
  /organisation/team/update/{teamId}:
    put:
      tags:
        - team
      summary: Update a team
      description: Send a PUT request to update all of a team's fields
      operationId: updateTeamPut
      parameters:
        - name: teamId
          in: path
          description: The UUID of the team
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTeamPut'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

    patch:
      tags:
        - team
      summary: Update a team
      description: Send a PATCH request to update only relevant fields
      operationId: updateTeamPatch
      parameters:
        - name: teamId
          in: path
          description: The UUID of the team
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTeamPatch'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Teams - Delete
  /organisation/team/delete/{teamId}:
    delete:
      tags:
        - team
      summary: Delete a team
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          description: The UUID of the team
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: [ ]

  #Teams - Get
  /organisation/teams:
    get:
      tags:
        - team
      summary: Get a list of teams
      operationId: getTeams
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responses/200"
      security:
        - api-key: []

#Paths End

#Components Start
components:
  securitySchemes:
    api-key:
      type: apiKey
      name: api-key
      in: header
      description: API key for authentication

  #Schemas Start
  schemas:
  #Start Connection Schema
    #Start Connection Test
    connectionTestResult:
      type: object
      properties:
        status:
          type: string
          example: success

        msg:
          type: string
          example: Your connection is successful.
    #Start Connection Test
  #End Connection Schema

  #Start Candidate Schema
    #Start Create Candidate
    createCandidate:
      type: object
      required:
        - userId
        - title
        - firstName
        - lastName
        - email
        - phone
        - jobTitle
        - onboardingOption
      properties:
        userId:
          description: The UUID of the user creating the candidate
          $ref: '#/components/schemas/coreBookingFields/properties/userId'

        title:
          description: The candidate's title
          type: string
          enum:
            - MR
            - MRS
            - MISS
            - MS
            - BARON
            - BARONESS
            - BRIGADIER
            - CANON
            - CAPTAIN
            - DR
            - DUCHESS
            - DUKE
            - ESQ
            - FATHER
            - HON
            - INSPECTOR
            - LADY
            - LORD
            - LT COL
            - MAJOR
            - MOST REVEREND
            - PASTOR
            - PROFESSOR
            - RABBI
            - REV DR
            - REVEREND
            - RT REVEREND
            - SIR
            - SISTER
            - SQUADRON LEADER
            - WING COMMANDER

        firstName:
          description: The candidate's first name
          type: string
          example: Joe
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'

        lastName:
          description: The candidate's last name
          type: string
          example: Bloggs
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'

        email:
          description: The candidate's email address
          type: string
          format: email
          minLength: 1
          maxLength: 64
          pattern: '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/'
          example: test@test.co.uk

        phone:
          description: The candidate's phone number
          type: string
          example: "+4412345678910"

        dateOfBirth:
          description: The candidate's date of birth in ISO 8601 format (YYYY-MM-DD)
          type: string
          format: date
          example: "1990-01-13"

        niNumber:
          description: The candidate's National Insurance number
          type: string
          pattern: '^[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z][0-9]{6}[A-D]$'
          example: "AB123456B"

        gender:
          description: The candidate's gender
          type: string
          enum:
            - male
            - female
            - other

        addresses:
          type: array
          items:
            type: object
            required:
              - type
              - addressLine1
              - townCity
              - country
              - moveIn
            properties:
              type:
                description: The type of address - current or previous
                type: string
                enum:
                  - current
                  - previous
              addressLine1:
                $ref: '#/components/schemas/addressStructure/properties/addressLine1'
              addressLine2:
                $ref: '#/components/schemas/addressStructure/properties/addressLine2'
              townCity:
                $ref: '#/components/schemas/addressStructure/properties/townCity'
              county:
                $ref: '#/components/schemas/addressStructure/properties/county'
              country:
                $ref: '#/components/schemas/addressStructure/properties/country'
              postcode:
                $ref: '#/components/schemas/addressStructure/properties/postcode'
              moveIn:
                description: The candidate's move in date
                type: string
                format: date
              moveOut:
                description: The candidate's move out date - Only applicable to previous addresses
                type: string
                format: date
          example: [
            {
              "type": "current",
              "addressLine1": "Address Line 1",
              "addressLine2": "Address Line 2",
              "townCity": "Town",
              "county": "County",
              "country": "GB",
              "postcode": "AB1 2CD",
              "moveIn": "2020-01-13"
            },
            {
              "type": "previous",
              "addressLine1": "Address Line 1",
              "addressLine2": "Address Line 2",
              "townCity": "Town",
              "county": "County",
              "country": "GB",
              "postcode": "AB1 2CD",
              "moveIn": "2000-01-13",
              "moveOut": "2020-01-13"
            }
          ]

        jobTitle:
          description: The candidate's job title
          type: string
          example: associate-ambulance-practitioner
          enum:
            - counsellor
            - health-care-assistant
            - health-education-advisor
            - mental-health-practitioner
            - nursing-associate
            - occupational-therapy-assistant
            - pals
            - phlebotomist
            - physician-assistant
            - physiotherapy-assistant
            - play-specialist
            - pre-reg-pharmacist
            - rehabilitation-assistant
            - healthcare-support-worker
            - medical-laboratory-assistant
            - associate-ambulance-practitioner
            - first-responder
            - urgent-care-assistant
            - emergency-care-assistant
            - financial-staff
            - hr-staff
            - it-staff
            - library-staff
            - operational-staff
            - researcher
            - clinical-coder
            - advanced-clinical-practitioner
            - operating-department-practitioner
            - arts-therapist
            - audiologist
            - chiropodist-podiatrist
            - dietitian-nutritionist
            - occupational-therapist
            - orthoptist
            - paramedic
            - physiotherapist
            - diagnostic-radiographer
            - therapeutic-radiographer
            - speech-language-therapist
            - biomedical-scientist
            - nurse-practitioner
            - nurse
            - community-nurse
            - community-nurse-practitioner
            - health-visitor
            - mental-health-nurse
            - midwife
            - midwife-consultant
            - midwife-specialist-practitioner
            - military-nurse
            - matron
            - nurse-consultant
            - sister-charge-nurse
            - chaplain
            - clinical-psychologist
            - laboratory-technician
            - lecturer-teacher
            - pharmacist
            - physician-associate
            - psychotherapist
            - social-worker
            - general-surgeon
            - cardiothoracic-surgeon
            - neurosurgeon
            - oral-and-maxillofacial-surgeon
            - ent-surgeon
            - paediatric-surgeon
            - plastic-surgeon
            - trauma-and-orthopaedic-surgeon
            - urologist-surgeon
            - vascular-surgeon
            - dentist
            - hygienist
            - general-practitioner
            - doctor
            - radiologist
            - Anaesthetist
            - family-medicine-physician
            - paediatrician
            - cardiologist
            - endocrinologist
            - neurologist
            - psychiatrist
            - pulmonologist
            - dermatologist
            - nephrologist
            - rheumatologist
            - gastroenterologist
            - haematologist
            - oncologist
            - allergist-immunologist
            - geriatrician
            - ophthalmologist
            - infectious-disease-specialist
            - palliative-care-physician
            - junior-doctor

        onboardingOption:
          description: The candidate's method of onboarding. Automatic will send a link to the candidate's email address for them to complete an onboarding form.
          type: string
          example: automatic
          enum:
            - automatic
            - manual

        users:
          description: The UUID(s) of the user(s) you wish to associate the candidate with
          type: array
          example:
            - 123e4567-e89b-12d3-a456-426614174000

        teams:
          description: The UUID(s) of the team(s) you wish to associate the candidate with
          type: array
          example:
            - 123e4567-e89b-12d3-a456-426614174000
    #End Create Candidate

    #Start Update Candidate
    updateCandidatePut:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - jobTitle
        - isActive
      properties:
        firstName:
          $ref: '#/components/schemas/createCandidate/properties/firstName'
        lastName:
          $ref: '#/components/schemas/createCandidate/properties/lastName'
        email:
          $ref: '#/components/schemas/createCandidate/properties/email'
        phone:
          $ref: '#/components/schemas/createCandidate/properties/phone'
        jobTitle:
          $ref: '#/components/schemas/createCandidate/properties/jobTitle'
        isActive:
          description: Sets the status of the candidate to active/inactive
          type: boolean
          example: true

    updateCandidatePatch:
      type: object
      example:
        firstName: John
        lastName: Doe
      properties:
        firstName:
          $ref: '#/components/schemas/createCandidate/properties/firstName'
        lastName:
          $ref: '#/components/schemas/createCandidate/properties/lastName'
        email:
          $ref: '#/components/schemas/createCandidate/properties/email'
        phone:
          $ref: '#/components/schemas/createCandidate/properties/phone'
        jobTitle:
          $ref: '#/components/schemas/createCandidate/properties/jobTitle'
        isActive:
          description: Sets the status of the candidate to active/inactive
          type: boolean
          example: true
    #End Update Candidate

    #Start Create Candidate Note
    createCandidateNote:
      type: object
      properties:
        note:
          description: The content of the note you wish to add
          type: string
          example: This is a test note.
        userId:
          description: The UUID of the user creating the note
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
    #End Create Candidate Note
  #End Candidate Schema

  #Start Booking Schema
    #Start Create Clinical Interview Booking
    createClinicalInterviewBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          description: The method of booking
          type: string
          example: zoom
          enum:
            - form
            - zoom
            - whatsapp
        payment:
          $ref: '#/components/schemas/paymentStructure'
        dateSlot:
          $ref: '#/components/schemas/bookingDateStructure'
        template:
          type: string
          example: clinical-interview-default
      required:
        - candidateId
        - userId
        - bookingMethod
        - payment
        - template
    #End Create Clinical Interview Booking

    #Start Create Clinical Appraisal Booking
    createClinicalAppraisalBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          description: The method of booking
          type: string
          example: zoom
          enum:
            - form
            - zoom
            - whatsapp
        payment:
          $ref: '#/components/schemas/paymentStructure'
        dateSlot:
          $ref: '#/components/schemas/bookingDateStructure'
        template:
          type: string
          description: The name of the template to use
          example: clinical-appraisal-default
      required:
        - candidateId
        - userId
        - bookingMethod
        - payment
        - template
    #End Create Clinical Appraisal Booking

    #Start Create Blood Test Booking
    createBloodTestBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        services:
          type: array
          description: The slug(s) of the blood test
          items:
            type: string
          example: ["measles-blood-test", "mumps-blood-test"]
          enum:
            - measles-blood-test
            - mumps-blood-test
            - rubella-blood-test
            - mmr-blood-test
            - varicella-blood-test
            - tuberculosis-blood-test
            - hepatitis-b-surface-antibody-blood-test
            - hepatitis-b-surface-antigen-blood-test
            - hepatitis-c-blood-test
            - hiv-blood-test
            - non-epp-profile-blood-test
            - epp-profile-blood-test
        bookingMethod:
          description: The booking method
          type: string
          enum:
            - home-test-kit
          example: home-test-kit
        address:
          $ref: '#/components/schemas/addressStructure'
        payment:
          $ref: '#/components/schemas/paymentStructure'
    #End Create Blood Test Booking

    #Start Create Radiation Badge Booking
    createRadiationBadgeBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        service:
          type: string
          enum:
            - radiation-badge-body
            - radiation-badge-extremity
          example: radiation-badge-body
        bookingMethod:
          type: string
          enum:
            - send-to-candidate
          example: send-to-candidate
        address:
          $ref: '#/components/schemas/addressStructure'
        payment:
          $ref: '#/components/schemas/paymentStructure'
    #End Create Radiation Badge Booking

    #Start Create Fit to Work Check Booking
    createFitToWorkCheckBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          type: string
          description: The method of booking. Form will send a form to the candidate to collect the information. Drawer Form will accept all data through the POST request.
          enum:
            - form
            - drawer-form
          example: form
        payment:
          $ref: '#/components/schemas/paymentStructure'
        dateOfBirth:
          type: string
          format: date
          description: Date of birth in ISO 8601 format (YYYY-MM-DD)
          example: "1990-01-13"
        clearanceLevel:
          type: string
          enum:
            - epp
            - non-epp
            - non-clinical
        healthQuestionnaire:
          type: string
          format: base64
          description: Base64 encoded health questionnaire data
          example: "JVBERi0xLjMKJeLjz9MKMSAwIG9iago8PAovVHlwZSAvUGFnZXMKL0NvdW50IDEKL0tpZHMgWzMgMCBSXQo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMSAwIFIKPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAxIDAgUgovTWVkaWFCb3ggWzAgMCA2MTIgNzkyXQovUmVzb3VyY2VzIDw8Pj4KL0NvbnRlbnRzIFtdCj4+CmVuZG9iagp4cmVmCjAgNAowMDAwMDAwMDAwIDY1NTM1IGYKMDAwMDAwMDAxNSAwMDAwMCBuCjAwMDAwMDAwNzQgMDAwMDAgbgowMDAwMDAwMTIzIDAwMDAwIG4KdHJhaWxlcgo8PAovUm9vdCAyIDAgUgovU2l6ZSA0Cj4+CiUlRU9G"
    #End Create Fit to Work Check Booking

    #Start Create Practical Training Booking
    createPracticalTrainingBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        service:
          type: string
          description: The name of the practical training course required
          enum:
            - cstf-mandatory-training
          example: cstf-mandatory-training
        bookingMethod:
          type: string
          description: The booking method
          example: zoom
          enum:
            - in-person
            - zoom
        scheduleId:
          type: integer
          example: 4
        payment:
          $ref: '#/components/schemas/paymentStructure'
    #End Create Practical Training Booking

    #Start Create DBS Check Booking
    createDBSCheckBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        services:
          type: array
          description: The level of DBS check required
          items:
            type: string
            enum:
              - enhanced-dbs-check
              - standard-dbs-check
          example: ["enhanced-dbs-check"]
          minItems: 1
          required: true
        payment:
          $ref: '#/components/schemas/paymentStructure'
    #End Create DBS Check Booking

    #Start Create Right to Work Check Booking
    createRightToWorkCheckBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          type: string
          enum:
            - self-form
        sharecode:
          type: object
          description: Share code details for right to work check
          required:
            - sharecode
            - company
            - dob
          properties:
            sharecode:
              type: string
              description: Government issued share code for right to work check
              minLength: 9
              maxLength: 9
              example: "A1BCD23E4"
            company:
              type: string
              description: Company name for the right to work check
              example: "Unite Compliance"
            dob:
              type: string
              format: date
              description: Date of birth in YYYY-MM-DD format
              example: "1990-01-13"
        payment:
          $ref: '#/components/schemas/paymentStructure'
    #End Create Right to Work Check Booking

    #Start Create Digital ID Check Booking
    createDigitalIdCheckBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          type: string
          example: drawer-form
          enum:
            - drawer-form
        did:
          type: object
          description: Digital ID verification documents and selfie
          required:
            - primary
            - supporting
            - selfie
            - image_match
          properties:
            primary:
              type: object
              required:
                - document
                - files
              properties:
                document:
                  type: string
                  enum:
                    - biometric-residence-permit
                    - passport-uk
                    - driving-licence-uk
                  example: "biometric-residence-permit"
                files:
                  type: array
                  items:
                    type: string
                    format: base64
                  minItems: 1
                  description: Array of base64 encoded images of the primary document
                  example: [ "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABkAAD..." ]
            supporting:
              type: object
              required:
                - document
                - files
              properties:
                document:
                  type: string
                  enum:
                    - utility-bill-uk
                    - bank-statement-uk
                    - council-tax-bill
                  example: "utility-bill-uk"
                files:
                  type: array
                  items:
                    type: string
                    format: base64
                  minItems: 1
                  description: Array of base64 encoded images of the supporting document
                  example: [ "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABkAAD..." ]
            selfie:
              type: string
              format: base64
              description: Base64 encoded selfie image
              example: "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABkAAD..."
            image_match:
              type: string
              enum:
                - y
                - n
              description: Indicates if the selfie matches the ID document photo
              example: "y"
          payment:
            $ref: '#/components/schemas/paymentStructure'

    #End Create Digital ID Check Booking

    #Start Create Employment Reference Booking
    createEmploymentReferenceBooking:
      type: object
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          type: string
          enum:
            - form
        template:
          type: string
          example: employment-reference-default
        referenceRequirements:
          type: object
          properties:
            type:
              type: string
              enum:
                - amount
                - year
            count:
              type: integer
              example: 3
        payment:
          $ref: '#/components/schemas/paymentStructure'
      required:
        - candidateId
        - userId
        - bookingMethod
        - template
        - referenceRequirements
        - payment
    #End Create Employment Reference Booking

    #Start Create Placement Feedback Booking
    createPlacementFeedbackBooking:
      type: object
      properties:
        bookingMethod:
          type: string
          example: form
          enum:
            - form
            - drawer-form
      oneOf:
        - $ref: '#/components/schemas/endOfPlacementForm'
        - $ref: '#/components/schemas/endOfPlacementSelfComplete'

    # Form version schema
    endOfPlacementForm:
      type: object
      required:
        - candidateId
        - userId
        - booking_Method
        - payment
        - template
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          type: string
          description: Test
          example: form
          enum:
            - form
        payment:
          $ref: '#/components/schemas/paymentStructure'
        template:
          type: string
          enum:
            - end-of-placement-feedback-default
          example: end-of-placement-feedback-default

    # Self Complete version schema
    endOfPlacementSelfComplete:
      type: object
      required:
        - candidateId
        - userId
        - bookingMethod
        - dateOfBirth
        - references
        - payment
        - template
      properties:
        candidateId:
          $ref: '#/components/schemas/coreBookingFields/properties/candidateId'
        userId:
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        bookingMethod:
          type: string
          enum: [ drawer-form ]
          example: "drawer-form"
        dateOfBirth:
          type: string
          format: date
          example: "1990-01-13"
        references:
          type: array
          items:
            type: object
            required:
              - organisation
              - referenceType
              - firstName
              - lastName
              - position
              - email
              - roleDuringEmployment
              - phone
              - dateFrom
              - dateTo
            properties:
              organisation:
                type: string
                example: "SM24"
              referenceType:
                type: string
                enum: [ "Professional Reference" ]
                example: "Professional Reference"
              firstName:
                type: string
                example: "Joe"
              lastName:
                type: string
                example: "Bloggs"
              position:
                type: string
                example: "Nurse"
              email:
                type: string
                format: email
                example: "testemail@email.com"
              roleDuringEmployment:
                type: string
                example: "Nurse"
              phone:
                type: string
                pattern: '^\+[1-9]\d{1,14}$'
                example: "+44123456789"
              dateFrom:
                type: string
                format: date
                example: "2001-01-01"
              dateTo:
                type: string
                format: date
                example: "2010-01-01"
        payment:
          $ref: '#/components/schemas/paymentStructure'
        template:
          type: string
          enum: [ end-of-placement-feedback-default ]
          example: "end-of-placement-feedback-default"
    #End Create Placement Feedback Booking

    #Start Create Booking Note
    createBookingNote:
      type: object
      required:
        - bookingId
        - userId
        - note
      properties:
        userId:
          description: The UUID of the user creating the note
          $ref: '#/components/schemas/coreBookingFields/properties/userId'
        note:
          description: The content of the note you wish to add to the booking
          type: string
          example: This is a test note
    #End Create Booking Note
  #End Booking Schema

  #Start Organisation Schema
    #Start Create User
    createUser:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - jobTitle
        - password
      properties:
        firstName:
          $ref: '#/components/schemas/coreUserFields/properties/firstName'
        lastName:
          $ref: '#/components/schemas/coreUserFields/properties/lastName'
        email:
          $ref: '#/components/schemas/coreUserFields/properties/email'
        phone:
          $ref: '#/components/schemas/coreUserFields/properties/phone'
        jobTitle:
          $ref: '#/components/schemas/coreUserFields/properties/jobTitle'
        password:
          $ref: '#/components/schemas/coreUserFields/properties/password'
    #End Create User

    #Start Update User
    updateUserPut:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - jobTitle
      properties:
        firstName:
          $ref: '#/components/schemas/coreUserFields/properties/firstName'
        lastName:
          $ref: '#/components/schemas/coreUserFields/properties/lastName'
        email:
          $ref: '#/components/schemas/coreUserFields/properties/email'
        phone:
          $ref: '#/components/schemas/coreUserFields/properties/phone'
        jobTitle:
          $ref: '#/components/schemas/coreUserFields/properties/jobTitle'
        password:
          $ref: '#/components/schemas/coreUserFields/properties/password'

    updateUserPatch:
      type: object
      example:
        firstName: John
        lastName: Doe
      properties:
        firstName:
          $ref: '#/components/schemas/coreUserFields/properties/firstName'
        lastName:
          $ref: '#/components/schemas/coreUserFields/properties/lastName'
        email:
          $ref: '#/components/schemas/coreUserFields/properties/email'
        phone:
          $ref: '#/components/schemas/coreUserFields/properties/phone'
        jobTitle:
          $ref: '#/components/schemas/coreUserFields/properties/jobTitle'
        password:
          $ref: '#/components/schemas/coreUserFields/properties/password'
    #End Update User
  #End Organisation Schema

  #Start Recruitment Consultant Schema
    #Start Create Recruitment Consultant
    createRecruitmentConsultant:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
      properties:
        firstName:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/firstName'
        lastName:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/lastName'
        email:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/email'
        phone:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/phone'
    #End Create Recruitment Consultant

    #Start Update Recruitment Consultant
    updateRecruitmentConsultantPatch:
      type: object
      example:
        firstName: John
        email: newemail@test.co.uk
      properties:
        firstName:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/firstName'
        lastName:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/lastName'
        email:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/email'
        phone:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/phone'

    updateRecruitmentConsultantPut:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
      properties:
        firstName:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/firstName'
        lastName:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/lastName'
        email:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/email'
        phone:
          $ref: '#/components/schemas/coreRecruitmentConsultantFields/properties/phone'
    #End Update Recruitment Consultant
  #End Recruitment Consultant Schema

  #Start Teams Schema
    #Start Create Team
    createTeam:
      type: object
      required:
        - name
        - description
        - private
        - userId
      properties:
        name:
          $ref: '#/components/schemas/coreTeamFields/properties/name'
        description:
          $ref: '#/components/schemas/coreTeamFields/properties/description'
        private:
          $ref: '#/components/schemas/coreTeamFields/properties/private'
        userId:
          $ref: '#/components/schemas/coreTeamFields/properties/userId'
    #End Create Team

    #Start Update Team
    updateTeamPatch:
      type: object
      example:
        name: New Team Name
      properties:
        name:
          $ref: '#/components/schemas/coreTeamFields/properties/name'
        description:
          $ref: '#/components/schemas/coreTeamFields/properties/description'
        private:
          $ref: '#/components/schemas/coreTeamFields/properties/private'
        userId:
          $ref: '#/components/schemas/coreTeamFields/properties/userId'

    updateTeamPut:
      type: object
      required:
        - name
        - description
        - private
        - userId
      properties:
        name:
          $ref: '#/components/schemas/coreTeamFields/properties/name'
        description:
          $ref: '#/components/schemas/coreTeamFields/properties/description'
        private:
          $ref: '#/components/schemas/coreTeamFields/properties/private'
        userId:
          $ref: '#/components/schemas/coreTeamFields/properties/userId'
    #End Update Team
  #End Teams Schema

  #Start General Structure Schema
    #Start Core User Fields
    coreUserFields:
      type: object
      properties:
        firstName:
          description: The user's first name
          type: string
          example: Joe
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
        lastName:
          description: The user's last name
          type: string
          example: Bloggs
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
        email:
          description: The user's email address
          type: string
          format: email
          minLength: 1
          maxLength: 64
          pattern: '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/'
          example: test@test.co.uk
        phone:
          description: The user's phone number
          type: string
          example: "+44123456789"
        jobTitle:
          description: The user's job title
          type: string
          example: Manager
        password:
          description: The user's password
          type: string
          minLength: 8
          maxlength: 32
          example: password123!
        userId:
          type: string
          format: uuid
          description: The UUID of the user
          example: "123e4567-e89b-12d3-a456-426614174000"
    #End Core User Fields

    #Start Core Recruitment Consultant Fields
    coreRecruitmentConsultantFields:
      type: object
      properties:
        firstName:
          description: The recruitment consultant's first name
          type: string
          example: Joe
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
        lastName:
          description: The recruitment consultant's last name
          type: string
          example: Bloggs
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
        email:
          description: The recruitment consultant's email address
          type: string
          format: email
          minLength: 1
          maxLength: 64
          pattern: '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/'
          example: test@test.co.uk
        phone:
          description: recruitment consultant's phone number
          type: string
          example: "+44123456789"
    #End Core Recruitment Consultant Fields

    #Start Core Team Fields
    coreTeamFields:
      type: object
      properties:
        name:
          description: The name of the team
          type: string
          example: Team Name
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
        description:
          description: The team's description
          type: string
          example: This is an example team
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
        private:
          description: The privacy status of the team
          type: boolean
          example: false
        userId:
          description: The UUID of the user who administrates the team
          $ref: '#/components/schemas/coreUserFields/properties/userId'
    #End Core Team Fields

    #Start Core Booking Fields
    coreBookingFields:
      type: object
      properties:
        candidateId:
          type: string
          format: uuid
          description: The UUID of the candidate you wish to create the booking for
          example: "123e4567-e89b-12d3-a456-426614174000"

        userId:
          type: string
          format: uuid
          description: The UUID of the user creating the booking
          example: "123e4567-e89b-12d3-a456-426614174000"

        bookingId:
          type: string
          format: uuid
          description: The UUID of the booking
          example: "123e4567-e89b-12d3-a456-426614174000"
    #End Core Booking Fields

    #Start Date Slot Booking Structure
    bookingDateStructure:
      type: object
      required:
        - date
        - slot
      properties:
        date:
          type: string
          format: date
          description: The date of the booking in YYYY-MM-DD format
          example: "2026-02-04"

        slot:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]$'
          description: Time slot in 24-hour format (HH:mm-HH:mm)
          example: "10:00-10:30"
    #End Date Slot Booking Structure

    #Start Booking Payment Structure
    paymentStructure:
      type: object
      properties:
        option:
          type: string
          enum:
            - organisation
            - candidate
            - split
          description: Who is responsible for the payment
          example: organisation
        organisationPayment:
          type: number
          format: float
          nullable: true
          description: Amount to be paid by organisation
          example: null
        candidatePayment:
          type: number
          format: float
          nullable: true
          description: Amount to be paid by candidate
          example: null
        splitAmountType:
          type: string
          enum:
            - currency
            - percentage
          description: Whether the split is based on currency amount or percentage
          example: currency
        paymentMethod:
          type: string
          enum:
            - invoice
            - card
          description: Method of payment
          example: invoice
    #End Payment Structure

    #Start Address Structure
    addressStructure:
      type: object
      required:
        - addressLine1
        - townCity
        - country
        - postcode
      properties:
        addressLine1:
          type: string
          description: First line of address
          example: "Address Line 1"

        addressLine2:
          type: string
          description: Second line of address (optional)
          example: "Address Line 2"

        townCity:
          type: string
          description: Town or city name
          example: "Town"

        county:
          type: string
          description: County (optional)
          example: "County"

        country:
          type: string
          description: Two-letter country code (ISO 3166-1 alpha-2)
          enum:
            - AD
            - AE
            - AF
            - AL
            - AM
            - AO
            - AR
            - AT
            - AU
            - AZ
            - BA
            - BB
            - BD
            - BE
            - BF
            - BG
            - BH
            - BI
            - BJ
            - BN
            - BO
            - BR
            - BS
            - BT
            - BW
            - BY
            - BZ
            - CA
            - CD
            - CF
            - CG
            - CH
            - CI
            - CL
            - CM
            - CN
            - CO
            - CR
            - CU
            - CV
            - CY
            - CZ
            - DE
            - DJ
            - DK
            - DM
            - DO
            - DZ
            - EC
            - EE
            - EG
            - ER
            - ES
            - ET
            - FI
            - FJ
            - FM
            - FR
            - GA
            - GB
            - GD
            - GE
            - GG
            - GH
            - GI
            - GM
            - GN
            - GQ
            - GR
            - GT
            - GW
            - GY
            - HN
            - HR
            - HT
            - HU
            - ID
            - IE
            - IL
            - IM
            - IN
            - IQ
            - IR
            - IS
            - IT
            - JE
            - JM
            - JO
            - JP
            - KE
            - KG
            - KH
            - KI
            - KM
            - KN
            - KP
            - KR
            - KW
            - KZ
            - LA
            - LB
            - LC
            - LI
            - LK
            - LR
            - LS
            - LT
            - LU
            - LV
            - LY
            - MA
            - MC
            - MD
            - ME
            - MG
            - MH
            - MK
            - ML
            - MM
            - MN
            - MR
            - MT
            - MU
            - MV
            - MW
            - MX
            - MY
            - MZ
            - NA
            - NE
            - NG
            - NI
            - NL
            - NO
            - NP
            - NR
            - NZ
            - OM
            - PA
            - PE
            - PG
            - PH
            - PK
            - PL
            - PS
            - PT
            - PW
            - PY
            - QA
            - RO
            - RS
            - RU
            - RW
            - SA
            - SB
            - SC
            - SD
            - SE
            - SG
            - SI
            - SK
            - SL
            - SM
            - SN
            - SO
            - SR
            - SS
            - ST
            - SV
            - SY
            - SZ
            - TD
            - TG
            - TH
            - TJ
            - TL
            - TM
            - TN
            - TO
            - TR
            - TT
            - TV
            - TW
            - TZ
            - UA
            - UG
            - US
            - UY
            - UZ
            - VA
            - VC
            - VE
            - VN
            - VU
            - WS
            - XK
            - YE
            - ZA
            - ZM
            - ZW
          example: "GB"

        postcode:
          type: string
          description: Postcode
          example: "AB1 2CD"
    #End Address Structure
  #End General Structure Schema

    errorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        code:
          type: integer
          format: int32
          example: 400
        msg:
          type: string
          example: Error message details
        details:
          type: object
          nullable: true
          example: null

    response401:
      type: object
      properties:
        status:
          type: string
          example: fail

        msg:
          type: string
          example: Unauthorized

    responses:
      bookingResponse200:
        type: object
        properties:
          status:
            type: string
            example: success
          data:
            type: object
            properties:
              booking:
                type: object
                properties:
                  candidateId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  userId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  organisationId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  bookingStatusSlug:
                    type: string
                    example: booked
                  transactionAuthorised:
                    type: boolean
                    example: true
                  id:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  referenceId:
                    type: integer
                    example: 1001
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2026-02-13T13:55:23.000000Z
                  createdAt:
                    type: string
                    format: date-time
                    example: 2026-02-13T13:55:23.000000Z
                  customParameters:
                    type: array
                    items: { }
                    example: [ ]
      "200":
      # Add 200 response
      "400":
        description: Bad Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/errorResponse"
      "401":
      # Add 401 response
      "403":
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/errorResponse"
      "429":
        description: Too Many Requests
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/errorResponse"
      "500":
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/errorResponse"

    bookingStatusUpdatePayload:
      description: Payload received when a booking's status changes
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
          description: Unique identifier of the booking that was updated
        action:
          type: string
          enum: [ booking_status_update ]
          description: Identifier for the webhook type, will always be 'booking_status_update'
        bookingStatus:
          type: string
          description: The current status of the booking
          example: "awaiting-candidate"

    bookingNoteAddedPayload:
      description: Payload received when a note is added to a booking
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
          description: Unique identifier of the booking the note was added to
        action:
          type: string
          enum: [ booking_note_added ]
          description: Identifier for the webhook type, will always be 'booking_note_added'
        noteId:
          type: integer
          description: Identifier of the newly created note
          example: 1

    candidateDocumentAddedPayload:
      description: Payload received when a document is added to a candidate
      type: object
      properties:
        action:
          type: string
          enum: [ candidate_document_added ]
          description: Identifier for the webhook type, will always be 'candidate_document_added'
        candidateId:
          type: string
          format: uuid
          description: UUID of the candidate the document was added to
        documentType:
          type: string
          description: The type of document that was added
          example: "certificate-of-fitness"
        documentId:
          type: string
          format: uuid
          description: Unique identifier of the newly added document
        bookingId:
          type: string
          format: uuid
          description: Unique identifier of the associated booking

    candidateNoteAddedPayload:
      description: Payload received when a note is added to a candidate
      type: object
      properties:
        action:
          type: string
          enum: [ candidate_note_added ]
          description: Identifier for the webhook type, will always be 'candidate_note_added'
        candidateId:
          type: string
          format: uuid
          description: Unique identifier of the candidate the note was added to

#Components End
#Webhooks Start
webhooks:
  booking-status-{booking-status-slug}:
    post:
      description: |
        Booking status update webhook.
        Example: booking-status-completed, booking-status-booked, booking-status-pending-review
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookingStatusUpdatePayload'

  booking-note-added:
    post:
      description: |
        Booking note added webhook.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookingNoteAddedPayload'

  candidate-document-added-{document-type-slug}:
    post:
      description: |
        Candidate document added webhook.
        Example: candidate-document-added-certificate-of-fitness
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/candidateDocumentAddedPayload'

  candidate-note-added:
    post:
      description: |
        Candidate note added webhook.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/candidateNoteAddedPayload'
#Webhooks End